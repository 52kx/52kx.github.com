<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git 学习笔记</title>
    <url>/2019/09/12/git%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="将目录初始化-git-可管理的仓库"><a href="#将目录初始化-git-可管理的仓库" class="headerlink" title="将目录初始化 git 可管理的仓库"></a>将目录初始化 git 可管理的仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h2 id="git-首次拉取远程仓库代码"><a href="#git-首次拉取远程仓库代码" class="headerlink" title="git 首次拉取远程仓库代码"></a>git 首次拉取远程仓库代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> xxx</span><br></pre></td></tr></table></figure>

<h2 id="将代码提交到暂存区"><a href="#将代码提交到暂存区" class="headerlink" title="将代码提交到暂存区"></a>将代码提交到暂存区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add ./README.md <span class="comment"># 将当前目录下的README.md 提交到暂存区</span></span><br><span class="line">$ git add -A <span class="comment"># 将所有文件提交到暂存区</span></span><br></pre></td></tr></table></figure>

<h2 id="git-首次拉取远程仓库指定分支代码"><a href="#git-首次拉取远程仓库指定分支代码" class="headerlink" title="git 首次拉取远程仓库指定分支代码"></a>git 首次拉取远程仓库指定分支代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从xxx拉取dev分支的代码</span></span><br><span class="line">$ git <span class="built_in">clone</span> -b dev xxx</span><br></pre></td></tr></table></figure>

<h2 id="查看当前的状态"><a href="#查看当前的状态" class="headerlink" title="查看当前的状态"></a>查看当前的状态</h2><p>可以用来查看当前代码有没有被放到仓储中去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment"># 查看历史提交的日志</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --oneline <span class="comment">#可以看到简洁版的日志</span></span><br></pre></td></tr></table></figure>

<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard Head~0 <span class="comment"># 表示回退到上一次代码提交时的状态</span></span><br><span class="line"></span><br><span class="line">$ git reset --hard Head~1 <span class="comment"># 表示回退到上上次代码提交时的状态</span></span><br><span class="line"></span><br><span class="line">$ git reset --hard [版本号] <span class="comment"># 可以通过版本号精确的回退到某一次提交时的状态</span></span><br><span class="line"></span><br><span class="line">$ git reflog <span class="comment"># 可以看到每一次切换版本的记录,可以看到所有提交的版本号</span></span><br></pre></td></tr></table></figure>

<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>查看分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>

<p>创建分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch dev <span class="comment"># 创建dev分支</span></span><br></pre></td></tr></table></figure>

<p>切换分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout dev <span class="comment"># 切换到dev分支</span></span><br></pre></td></tr></table></figure>

<p>创建并切换分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev <span class="comment"># 创建并切换到dev分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#相当于执行下面的两条命令</span></span><br><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure>

<p>合并分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge dev <span class="comment"># 将dev分支合并到master</span></span><br></pre></td></tr></table></figure>

<p>删除分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev <span class="comment"># 删除已经合并的dev分支</span></span><br><span class="line">$ git branch -D dev <span class="comment"># 强制删除未合并的分支</span></span><br></pre></td></tr></table></figure>

<p>删除远端分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin :branchName</span><br><span class="line"><span class="comment"># git 1.7 之后</span></span><br><span class="line">$ git push origin --delete &lt;branchName&gt;</span><br></pre></td></tr></table></figure>

<p>重命名本地分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -m oldbranch newbranch</span><br></pre></td></tr></table></figure>

<h2 id="Git-如何在不提交当前分支的情况下切换到其它分支进行操作"><a href="#Git-如何在不提交当前分支的情况下切换到其它分支进行操作" class="headerlink" title="Git 如何在不提交当前分支的情况下切换到其它分支进行操作"></a>Git 如何在不提交当前分支的情况下切换到其它分支进行操作</h2><ol>
<li>首先将当前分支修改的内容通过 git add 提交到暂存区 然后使用 git stash 命令将当前分支存储起来</li>
<li>然后我们执行 git status 命令， 显示没有东西需要提交， 这时我们可以切换到其它分支</li>
<li>其它分支修改完毕后， 我们切换回来， 使用 git stash list 查看存储列表，注意前面的 stash@{0} 后面将用得到</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: 8826ea2 s</span><br></pre></td></tr></table></figure>

<p>使用以下命令恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125; <span class="comment"># stash中的此条内容不会删除，需要使用 git stash drop stash@&#123;0&#125; 删除</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop stash@&#123;0&#125; <span class="comment"># stash中的此条内容将被删除</span></span><br></pre></td></tr></table></figure>

<h2 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h2><p>要查看当前配置有哪些远程仓库，可以用 git remote 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure>

<p>也可以加上 -v 选项（译注：此为 –verbose 的简写，取首字母），显示对应的克隆地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin	git@github.com:love201314/vuex-demo.git (fetch)</span><br><span class="line">origin	git@github.com:love201314/vuex-demo.git (push)</span><br></pre></td></tr></table></figure>

<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 <code>git remote add [shortname] [url]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add github git@github.com:love201314/vuex-demo.git <span class="comment"># 关联 github</span></span><br><span class="line">$ git remote add gitee git@gitee.com:love201314/vuex-demo.git <span class="comment"># 关联码云</span></span><br></pre></td></tr></table></figure>

<h2 id="推送数据到远程仓库"><a href="#推送数据到远程仓库" class="headerlink" title="推送数据到远程仓库"></a>推送数据到远程仓库</h2><p> git push [remote-name][branch-name]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master <span class="comment"># 将当前数据推送到origin的master分支</span></span><br></pre></td></tr></table></figure>

<p>由于远程库是空的，我们第一次推送 master 分支时，可以加上了-u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以<code>git push</code>简化命令。</p>
<h2 id="远程仓库的删除和重命名"><a href="#远程仓库的删除和重命名" class="headerlink" title="远程仓库的删除和重命名"></a>远程仓库的删除和重命名</h2><p>在新版 Git 中可以用 <code>git remote rename</code> 命令修改某个远程仓库在本地的简称，比如想把 origin 改成 github，可以这么运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote rename origin github</span><br><span class="line">$ git remote -v</span><br><span class="line">github	git@github.com:love201314/vuex-demo.git (fetch)</span><br><span class="line">github	git@github.com:love201314/vuex-demo.git (push)</span><br></pre></td></tr></table></figure>

<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 <code>git remote rm</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote rm gitee <span class="comment"># 删除本地关联的 gitee 仓库</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-gitignore-文件忽略文件"><a href="#使用-gitignore-文件忽略文件" class="headerlink" title="使用 .gitignore 文件忽略文件"></a>使用 .gitignore 文件忽略文件</h2><p>  <code>.gitignore</code>,在这个文件中可以设置要被忽略的文件或者目录。被忽略的文件不会被提交仓储里去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此为注释 – 将被 Git 忽略</span></span><br><span class="line">*.a       <span class="comment"># 忽略所有 .a 结尾的文件</span></span><br><span class="line">!lib.a    <span class="comment"># 但 lib.a 除外</span></span><br><span class="line">/TODO     <span class="comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></span><br><span class="line">build/    <span class="comment"># 忽略 build/ 目录下的所有文件</span></span><br><span class="line">doc/*.txt <span class="comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>

<p>.gitignore 中增加了过滤规则但是不起作用的情况。多半是由于在创建.gitignore 文件或添加一些过滤规则之前就 track 了相应的内容，那么即使在.gitignore 文件中写入新的过滤规则，这些规则也不会起作用，Git 仍然会对这些文件进行版本管理。简单来说出现这种问题的原因就是 Git 已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。 这个时候解决方法就是先把本地这些文件变成未 track 状态，具体来说就是在缓存里删除它们，使用如下命令清楚缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm -r --cached</span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰 git</a></li>
<li><a href="http://iissnan.com/progit/" target="_blank" rel="noopener">Pro Git</a></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 包的发布与删除</title>
    <url>/2019/07/07/npm-publisher/</url>
    <content><![CDATA[<h2 id="注册-npm-账号"><a href="#注册-npm-账号" class="headerlink" title="注册 npm 账号"></a>注册 npm 账号</h2><p>网站 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> 注册完成后需要去邮箱验证一下</p>
<h2 id="电脑本地npm登陆"><a href="#电脑本地npm登陆" class="headerlink" title="电脑本地npm登陆"></a>电脑本地npm登陆</h2><p>打开终端输入命令：npm adduser,依次输入Username、Password、Email,用户名、密码、邮箱都是在npm上注册的。</p>
<p><img alt data-src="/images/post/20190507114730.png"></p>
<p>退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm <span class="built_in">logout</span></span><br></pre></td></tr></table></figure>

<h2 id="本地包发布到npm"><a href="#本地包发布到npm" class="headerlink" title="本地包发布到npm"></a>本地包发布到npm</h2><p><strong>注意：</strong> 不能使用淘宝源，发布的包的名字、版本就是项目目录中package.json里面的name和version</p>
<p>在项目根目录中执行 <code>npm publish</code> 即可发布到 <code>npm</code> 上</p>
<h2 id="删除上传的包"><a href="#删除上传的包" class="headerlink" title="删除上传的包"></a>删除上传的包</h2><p><strong>注意:</strong> 只有在发包的24小时内才允许撤销发布的包（ unpublish is only allowed with versions published in the last 24 hours）</p>
<p>在项目根目录下执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm unpublish --force</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>iview 常见问题</title>
    <url>/2019/07/07/iview-problem/</url>
    <content><![CDATA[<h2 id="iView常用组件清空技巧"><a href="#iView常用组件清空技巧" class="headerlink" title="iView常用组件清空技巧"></a>iView常用组件清空技巧</h2><p>清空DatePicker（日期选择器）的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.element.handleClear()</span><br></pre></td></tr></table></figure>

<p>清空TimePicker（时间选择器）的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.element.handleClear()</span><br></pre></td></tr></table></figure>

<p>清空Select组件的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.element.clearSingleSelect()</span><br></pre></td></tr></table></figure>

<p>清空Table组件的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.element.selectAll(flase)</span><br></pre></td></tr></table></figure>

<h2 id="iview的Table中，如果使用render函数渲染Input组件时，Input组件触发change事件时，Input组件会失去焦点。"><a href="#iview的Table中，如果使用render函数渲染Input组件时，Input组件触发change事件时，Input组件会失去焦点。" class="headerlink" title="iview的Table中，如果使用render函数渲染Input组件时，Input组件触发change事件时，Input组件会失去焦点。"></a>iview的Table中，如果使用render函数渲染Input组件时，Input组件触发change事件时，Input组件会失去焦点。</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    title: <span class="string">'备注'</span>,</span><br><span class="line">    key: <span class="string">'remark'</span>,</span><br><span class="line">    render: <span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> h(<span class="string">'Input'</span>, &#123;</span><br><span class="line">            props: &#123;</span><br><span class="line">                size: <span class="string">'small'</span>,</span><br><span class="line">                value: params.row.remark</span><br><span class="line">            &#125;,</span><br><span class="line">            on:&#123;</span><br><span class="line">                <span class="string">'on-change'</span>: <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">                    params.row.remark = event.target.value</span><br><span class="line">                    <span class="keyword">this</span>.data2[params.index] = params.row</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>vue</tag>
        <tag>iview</tag>
      </tags>
  </entry>
  <entry>
    <title>create-react-app-扩展 webpack 配置</title>
    <url>/2019/07/07/create-react-app-webpack-expand/</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react-app-rewired customize-cra -D</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code> 的 <code>script</code> 脚本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">        <span class="attr">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">        <span class="attr">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line">        <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目根目录下创建 <code>config-overrides.js</code> 基本内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* config-overrides.js */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do stuff with the webpack config...</span></span><br><span class="line">  <span class="comment">// config 为webpack对象 env 当前环境 development, production</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>customize-cra</code> 协助我们自定义 webpack 配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* config-overrides.js */</span></span><br><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports, addWebpackAlias, useEslintRc &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// 使用 stylus</span></span><br><span class="line"><span class="keyword">const</span> rewireStyl = <span class="built_in">require</span>(<span class="string">'react-app-rewire-stylus-modules'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  <span class="comment">// 使用 customize-cra 配置单独的 eslintrc 文件</span></span><br><span class="line">  useEslintRc(),</span><br><span class="line">  <span class="comment">// 使用 customize-cra 配置 别名</span></span><br><span class="line">  addWebpackAlias(&#123;</span><br><span class="line">    <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// react-app-rewired</span></span><br><span class="line">  (config, env) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 使用 css stylus 预处理器</span></span><br><span class="line">    config = rewireStyl(config, env)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>更多配置:👇</p>
<ul>
<li><a href="https://github.com/arackaf/customize-cra" target="_blank" rel="noopener">customize-cra 文档</a></li>
<li><a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewired 文档</a></li>
</ul>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>create-react-app 自定义 eslint</title>
    <url>/2019/07/07/react-webpack-eslint/</url>
    <content><![CDATA[<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>使用 vscode 编辑器安装 eslint</p>
<ol>
<li><code>npm run eject</code></li>
<li>删除 <code>package.json</code> 如下配置</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"eslintConfig": &#123;</span><br><span class="line">    "extends": "react-app"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在终端中执行 <code>npx eslint --init</code> 选择回答问题的方式即可（此处我选择生成js文件 <code>.eslintrc.js</code>）</li>
<li>打开生成的 <code>.eslintrc.js</code>, 在 <code>extends</code> 中加入 <code>react-app</code>, 如下:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [<span class="string">'eslint:recommended'</span>, <span class="string">'react-app'</span>],</span><br><span class="line">  globals: &#123;</span><br><span class="line">    Atomics: <span class="string">'readonly'</span>,</span><br><span class="line">    SharedArrayBuffer: <span class="string">'readonly'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      jsx: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ecmaVersion: <span class="number">2018</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="string">'react'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    indent: [<span class="string">'error'</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="string">'linebreak-style'</span>: [<span class="string">'error'</span>, <span class="string">'windows'</span>],</span><br><span class="line">    quotes: [<span class="string">'error'</span>, <span class="string">'single'</span>],</span><br><span class="line">    semi: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-prettier"><a href="#使用-prettier" class="headerlink" title="使用 prettier"></a>使用 prettier</h2><p><code>perttier</code> 可以看作是 eslint 的一个插件， 所有的代码样式规范有 <code>prettier</code> 接管</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure>

<p>在 <code>.eslintrc.js</code> 的 <code>plugin</code> 中加入如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">'react'</span>, <span class="string">'prettier'</span>]</span><br></pre></td></tr></table></figure>

<p>根目录创建 <code>prettier.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  semi: <span class="literal">false</span>, <span class="comment">// 禁止分号</span></span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 使用单引号</span></span><br><span class="line">  jsxSingleQuote: <span class="literal">true</span>, <span class="comment">// jsx中使用单引号</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// tab 使用两个空格</span></span><br><span class="line">  useTabs: <span class="literal">false</span>, <span class="comment">// 不适用tab</span></span><br><span class="line">  endOfLine: <span class="string">'crlf'</span>, <span class="comment">// 换行符</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span> <span class="comment">// &#123;a:1&#125; =&gt; &#123; a: 1 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 <code>.eslintrc.js</code> 的 <code>rules</code> 将有关代码样式的规则删除，并添加如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'prettier/prettier'</span>: <span class="string">'error'</span>, <span class="comment">// prettier 标记的地方显示错误</span></span><br><span class="line"><span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line"><span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span></span><br></pre></td></tr></table></figure>

<p>使用 .eslintignore 忽略检查的文件夹 只检查src目录下的文件</p>
<h4 id="eslintrc-js-完整配置"><a href="#eslintrc-js-完整配置" class="headerlink" title=".eslintrc.js 完整配置"></a>.eslintrc.js 完整配置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [<span class="string">'eslint:recommended'</span>, <span class="string">'react-app'</span>],</span><br><span class="line">  globals: &#123;</span><br><span class="line">    Atomics: <span class="string">'readonly'</span>,</span><br><span class="line">    SharedArrayBuffer: <span class="string">'readonly'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      jsx: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ecmaVersion: <span class="number">2018</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="string">'react'</span>, <span class="string">'prettier'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'prettier/prettier'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="prettier-config-js-完整配置"><a href="#prettier-config-js-完整配置" class="headerlink" title="prettier.config.js 完整配置"></a>prettier.config.js 完整配置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  semi: <span class="literal">false</span>, <span class="comment">// 禁止分号</span></span><br><span class="line">  formatOnSave: <span class="literal">true</span>, <span class="comment">// 保存格式化</span></span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 使用单引号</span></span><br><span class="line">  jsxSingleQuote: <span class="literal">false</span>, <span class="comment">// jsx中使用双引号</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// tab 使用两个空格</span></span><br><span class="line">  useTabs: <span class="literal">false</span>, <span class="comment">// 不适用tab</span></span><br><span class="line">  endOfLine: <span class="string">'crlf'</span>, <span class="comment">// 换行符</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span> <span class="comment">// &#123;a:1&#125; =&gt; &#123; a: 1 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-aribnb"><a href="#使用-aribnb" class="headerlink" title="使用 aribnb"></a>使用 aribnb</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add eslint-config-airbnb -D</span><br></pre></td></tr></table></figure>

<p>在 <code>.eslintrc.js</code> 中添加如下配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">extends: [<span class="string">'airbnb'</span>],</span><br></pre></td></tr></table></figure>

<h3 id="检查-git-提交的代码"><a href="#检查-git-提交的代码" class="headerlink" title="检查 git 提交的代码"></a>检查 git 提交的代码</h3><p><code>package.json</code> 中添加如下脚本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"eslint --ext .js,.jsx src"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装 pre-commit </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add pre-commit -D</span><br></pre></td></tr></table></figure>

<p>在 package.json 中配置中添加如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pre-commit"</span>: [</span><br><span class="line">    <span class="string">"lint"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 lint 对应第 1 步中增加的脚本命令名。<br>完成之后，在每次提交代码之前，pre-commit 都会拦截 Git 的 commit 操作，然后运行 lint 命令进行代码检测，若检测到有违反校验规则的情况，则会返回错误，从而导致 git commit 失败。</p>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6基础</title>
    <url>/2019/04/11/ES6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>完整教程在<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMASCRIPT 6 入门</a></p>
<h2 id="新的变量声明方式let和const"><a href="#新的变量声明方式let和const" class="headerlink" title="新的变量声明方式let和const"></a>新的变量声明方式<code>let</code>和<code>const</code></h2><blockquote>
<p>与 var 不同，新的变量声明方式带来了一些不一样的特性，其中最重要的两个特性就是提供了块级作用域与不再具备变量提升</p>
</blockquote>
<h3 id="let-主要特征"><a href="#let-主要特征" class="headerlink" title="let 主要特征"></a><code>let</code> 主要特征</h3><ul>
<li>不存在变量提升的问题，只有定义之后才能使用</li>
<li>有块级作用域<code>{ }</code></li>
</ul>
<h3 id="const-主要特征"><a href="#const-主要特征" class="headerlink" title="const 主要特征"></a><code>const</code> 主要特征</h3><ul>
<li>const 定义为常量，<strong>无法被重新赋值</strong></li>
<li>定义常量，必须初始化，否则会报错</li>
<li>不存在变量提升的问题，只有定义之后才能使用</li>
<li>有块级作用域<code>{ }</code></li>
</ul>
<h2 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h2><blockquote>
<p>所谓的解构赋值，就是把 某个对象中的属性，当作变量，给解放出来，这样，今后就能够当作变量直接使用了</p>
</blockquote>
<p>可以使用 <code>:</code> 为解构出来的变量重命名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'xsyd'</span>,</span><br><span class="line">  age: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: myname, age &#125; = person</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myname) <span class="comment">// xsyd</span></span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// 23</span></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// name is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c) <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><blockquote>
<p>箭头函数，本质上就是一个匿名函数</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">形式参数 =&gt; &#123;</span><br><span class="line">    函数体代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的特征"><a href="#箭头函数的特征" class="headerlink" title="箭头函数的特征"></a>箭头函数的特征</h3><p>箭头函数内部的<code>this</code>, 永远和箭头函数外部的<code>this</code>保持一致</p>
<h3 id="箭头函数变体"><a href="#箭头函数变体" class="headerlink" title="箭头函数变体"></a>箭头函数变体</h3><p>如果箭头函数，左侧的形参列表中，只有一个参数，则，左侧小括号可以省略</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.add = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果右侧函数体中，只有一行代码，则，右侧的 <code>{ }</code> 可以省略</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<p>如果箭头函数左侧 只有一个 形参，而且右侧只有一行代码，则 两边的 <code>()</code> 和 <code>{}</code> 都可以省略</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.add = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果我们省略了 右侧函数体的 <code>{ }</code>，那么，默认会把 右侧函数体中代码的执行结果，当作箭头函数的调用结果 return 出去</p>
<h2 id="为函数参数指定默认值"><a href="#为函数参数指定默认值" class="headerlink" title="为函数参数指定默认值"></a>为函数参数指定默认值</h2><p>之前我们不能直接为函数指定默认参数，因此很多时候为了保证传入的参数具备一个默认值，我们常常使用如下的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = x || <span class="number">20</span></span><br><span class="line">  <span class="keyword">var</span> y = y || <span class="number">30</span></span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式并不是没有缺点，比如当我传入一个 x 值为 false，这个时候任然会取到默认值，就不是我们的本意了。es6 新增函数参数默认值写法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x = <span class="number">20</span>, y = <span class="number">30</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符 ..."></a>展开运算符 <code>...</code></h2><blockquote>
<p><strong>展开语法</strong>(Spread syntax), 可以在函数调用/数组构造时, 将数组表达式或者 string 在语法层面展开；还可以在构造字面量对象时, 将对象表达式按 key-value 的方式展开</p>
</blockquote>
<h3 id="在函数调用时使用展开语法"><a href="#在函数调用时使用展开语法" class="headerlink" title="在函数调用时使用展开语法"></a>在函数调用时使用展开语法</h3><p>等价于<code>apply</code>的方式<br>如果想将数组元素迭代为函数参数，一般使用 Function.prototype.apply 的方式进行调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">x, y, z</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">myFunction.apply(<span class="literal">null</span>, args)</span><br></pre></td></tr></table></figure>

<p>有了展开语法，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">x, y, z</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">myFunction(...args)</span><br></pre></td></tr></table></figure>

<h3 id="在-new-表达式中应用"><a href="#在-new-表达式中应用" class="headerlink" title="在 new 表达式中应用"></a>在 new 表达式中应用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateFields = [<span class="number">1970</span>, <span class="number">0</span>, <span class="number">1</span>] <span class="comment">// 1970年1月1日</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>（... dateFields）</span><br></pre></td></tr></table></figure>

<h3 id="构造字面量数组时使用展开语法"><a href="#构造字面量数组时使用展开语法" class="headerlink" title="构造字面量数组时使用展开语法"></a>构造字面量数组时使用展开语法</h3><p>没有展开语法的时候，只能组合使用 <code>push</code>，<code>splice</code>，<code>concat</code> 等方法，来将已有数组元素变成新数组的一部分。有了展开语法, 通过字面量方式, 构造新数组会变得更简单、更优雅：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parts = [<span class="string">'shoulders'</span>, <span class="string">'knees'</span>]</span><br><span class="line"><span class="keyword">var</span> lyrics = [<span class="string">'head'</span>, ...parts, <span class="string">'and'</span>, <span class="string">'toes'</span>] <span class="comment">// ["head", "shoulders", "knees", "and", "toes"]</span></span><br></pre></td></tr></table></figure>

<h4 id="拷贝数组"><a href="#拷贝数组" class="headerlink" title="拷贝数组"></a>拷贝数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr] <span class="comment">// like arr.slice()</span></span><br><span class="line">arr2.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr2 此时变成 [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// arr 不受影响</span></span><br><span class="line"><span class="comment">// 执行的是浅拷贝（只遍历一层）</span></span><br></pre></td></tr></table></figure>

<h3 id="构造字面量对象时使用展开语法"><a href="#构造字面量对象时使用展开语法" class="headerlink" title="构造字面量对象时使用展开语法"></a>构造字面量对象时使用展开语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">x</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">foo</span>: <span class="string">'baz'</span>, <span class="attr">y</span>: <span class="number">13</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clonedObj = &#123; ...obj1 &#125;</span><br><span class="line"><span class="comment">// 克隆后的对象: &#123; foo: "bar", x: 42 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mergedObj = &#123; ...obj1, ...obj2 &#125;</span><br><span class="line"><span class="comment">// 合并后的对象: &#123; foo: "baz", x: 42, y: 13 &#125;</span></span><br></pre></td></tr></table></figure>

<p>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">MDN</a> 文档</p>
<br>

<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">MDN</a></p>
<blockquote>
<p>模板字符串使用反引号来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号时，需要在它前面加转义符（\）。</p>
</blockquote>
<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>在新行中插入的任何字符都是模板字符串中的一部分，使用普通字符串，你可以通过以下的方式获得多行字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'string text line 1\n'</span> + <span class="string">'string text line 2'</span>)</span><br></pre></td></tr></table></figure>

<p>要获得同样效果的多行字符串，使用模板字符串只需使用如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`string text line 1</span></span><br><span class="line"><span class="string">string text line 2`</span>)</span><br></pre></td></tr></table></figure>

<h3 id="插入表达式"><a href="#插入表达式" class="headerlink" title="插入表达式"></a>插入表达式</h3><p>在普通字符串中嵌入表达式，必须使用如下语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Fifteen is '</span> + (a + b) + <span class="string">' and\nnot '</span> + (<span class="number">2</span> * a + b) + <span class="string">'.'</span>)</span><br></pre></td></tr></table></figure>

<p>现在通过模板字符串，我们可以使用一种更优雅的方式来表示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Fifteen is <span class="subst">$&#123;a + b&#125;</span> and</span></span><br><span class="line"><span class="string">not <span class="subst">$&#123;<span class="number">2</span> * a + b&#125;</span>.`</span>)</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ol>
<li>如果使用模版字符串表示多行字符串，所有的空格和缩进都会被保存在输出中！！</li>
<li>在<code>${}</code>中的大括号里可以放入任意的 JavaScript 表达式，还可以进行运算，以及引用对象属性。</li>
<li>模版字符串<code>${}</code>中还可以调用函数</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn更换为阿里源</title>
    <url>/2019/02/26/yarn%E6%9B%B4%E6%8D%A2%E4%B8%BA%E9%98%BF%E9%87%8C%E6%BA%90/</url>
    <content><![CDATA[<h2 id="为什么要更改源"><a href="#为什么要更改源" class="headerlink" title="为什么要更改源"></a>为什么要更改源</h2><p>查看默认的源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config get registry</span><br></pre></td></tr></table></figure>

<p>yarn 默认的源在国外，下载速度比较慢，我们推荐使用阿里旗下的<a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像源</a></p>
<h2 id="如何更改"><a href="#如何更改" class="headerlink" title="如何更改"></a>如何更改</h2><h3 id="临时更改"><a href="#临时更改" class="headerlink" title="临时更改"></a>临时更改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add 软件名 --registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h3 id="全局修改"><a href="#全局修改" class="headerlink" title="全局修改"></a>全局修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h3 id="使用-yrm-快速切换镜像源"><a href="#使用-yrm-快速切换镜像源" class="headerlink" title="使用 yrm 快速切换镜像源"></a>使用 yrm 快速切换镜像源</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add yrm</span><br></pre></td></tr></table></figure>

<p>查看所有可用的镜像源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yrm ls</span><br><span class="line">  npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br><span class="line">* yarn --- https://registry.yarnpkg.com</span><br></pre></td></tr></table></figure>

<p>使用淘宝镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yrm use taobao</span><br><span class="line">  YARN Registry has been <span class="built_in">set</span> to: https://registry.npm.taobao.org/</span><br><span class="line">  NPM Registry has been <span class="built_in">set</span> to: https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<p>测试访问速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yrm <span class="built_in">test</span> taobao</span><br><span class="line">* taobao - 1529ms</span><br></pre></td></tr></table></figure>

<p>更多详细信息请移步<a href="https://github.com/i5ting/yrm" target="_blank" rel="noopener">GitHub</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>yrm</tag>
      </tags>
  </entry>
  <entry>
    <title>react脚手架项目添加css预处理器支持</title>
    <url>/2019/02/26/react-cli-css-prev/</url>
    <content><![CDATA[<blockquote>
<p>create-react-app v2.1.3</p>
</blockquote>
<h2 id="添加-scss-支持"><a href="#添加-scss-支持" class="headerlink" title="添加 scss 支持"></a>添加 scss 支持</h2><p>项目默认支持 scss，</p>
<h2 id="添加-less-支持"><a href="#添加-less-支持" class="headerlink" title="添加 less 支持"></a>添加 less 支持</h2><p>将项目的配置文件暴露出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn eject</span><br></pre></td></tr></table></figure>

<p>安装 less 和 less-loader</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code>  文件如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">"transformIgnorePatterns": [</span><br><span class="line">   "[/\\\\]node_modules[/\\\\].+\\.(js|jsx|ts|tsx)$",</span><br><span class="line">   <span class="string">"^.+\\.module\\.(css|sass|scss|less)$"</span></span><br><span class="line"> ],</span><br><span class="line">"moduleNameMapper": &#123;</span><br><span class="line">  "^react-native$": "react-native-web",</span><br><span class="line">  "^.+\\.module\\.(css|sass|scss|less)$": "identity-obj-proxy"</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>修改 <code>webpack.config.js</code> 文件,在 <code>module</code> 中找到 <code>scss</code> 的规则并在底下添加 <code>less</code> 规则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> cssRegex = <span class="regexp">/\.css$/</span></span><br><span class="line"><span class="keyword">const</span> cssModuleRegex = <span class="regexp">/\.module\.css$/</span></span><br><span class="line"><span class="keyword">const</span> sassRegex = <span class="regexp">/\.(scss|sass)$/</span></span><br><span class="line"><span class="keyword">const</span> sassModuleRegex = <span class="regexp">/\.module\.(scss|sass)$/</span></span><br><span class="line"><span class="comment">// 需要添加的内容</span></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span></span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">  test: lessRegex,</span><br><span class="line">  exclude: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(</span><br><span class="line">    &#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction</span><br><span class="line">      ? shouldUseSourceMap</span><br><span class="line">      : isEnvDevelopment,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  ),</span><br><span class="line">  sideEffects: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(</span><br><span class="line">    &#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction</span><br><span class="line">      ? shouldUseSourceMap</span><br><span class="line">      : isEnvDevelopment,</span><br><span class="line">      modules: <span class="literal">true</span>,</span><br><span class="line">      getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  )</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>es6-promise</title>
    <url>/2018/11/20/es6-promise/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="new-Promise-function-resolve-reject-…-executor"><a href="#new-Promise-function-resolve-reject-…-executor" class="headerlink" title="new Promise( function(resolve, reject) {…} /_ executor _/ );"></a>new Promise( function(resolve, reject) {…} /_ executor _/ );</h3><p>下面看一段 promise 的示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve 是成功后的回调函数，通常的做法是将异步操作成功的结果作为参数传递给resolve</span></span><br><span class="line">    resolve(<span class="string">'ok'</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res)) <span class="comment">// 输出ok</span></span><br></pre></td></tr></table></figure>

<p>注意： 上面的代码，只是 new 了一个 Promise 对象，并没有调用就执行了。我们一般是封装成一个函数，在需要的时候去调用这个函数</p>
<p>一个 Promise 有以下几种状态:</p>
<ul>
<li>pending: 初始状态，既不是成功，也不是失败状态。</li>
<li>fulfilled: 意味着操作成功完成。</li>
<li>rejected: 意味着操作失败。</li>
</ul>
<p>Promise 的构造函数接受一个参数，是函数；并且传入两个参数：resolve,reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。resolve 和 reject 函数被调用时，分别将 promise 的状态改为 fulfilled（完成）或 rejected（失败）</p>
<p>p 对象调用了 then 方法并传入了一个箭头函数，箭头函数的参数就是执行异步操作成功后的结果,then 方法可以传入两个回调函数，第一个处理执行异步成功的回调函数，第二个处理异步执行失败的回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.then(</span><br><span class="line">  res =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理 resolve</span></span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理reject</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="promise-链式操作"><a href="#promise-链式操作" class="headerlink" title="promise 链式操作"></a>promise 链式操作</h2><p>使用 Promise 分装一个文件读取的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(path, <span class="string">'utf-8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有这样一个需求，当文件 1 读取成功的时候才能读取文件 2，我们可以这样编码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getFileByPath(<span class="string">'/user/admin/desktop/file/1.txt'</span>)</span><br><span class="line">  .then(</span><br><span class="line">    res =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res) <span class="comment">// 文件1的内容</span></span><br><span class="line">      <span class="comment">// 继续读取文件2, 我们并不是直接在方法后面调用 then 而是使用rerturn将其返回，在外面继续调用 then 实现链式编程，并且避免了回调地狱</span></span><br><span class="line">      <span class="keyword">return</span> getFileByPath(<span class="string">'/user/admin/desktop/file/2.txt'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    err =&gt; <span class="built_in">console</span>.log(<span class="string">'读取失败了'</span>)</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// 文件2的内容</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="catch-的用法"><a href="#catch-的用法" class="headerlink" title="catch 的用法"></a>catch 的用法</h2><p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。注意：因此无法知道错误是哪个 Promise 产生的，除非设置了不一样的错误提示。</p>
<p>一般，不要在 then 方法中定义 Rejected 状态的回调函数（即 then 的第二个参数），而应该总是使用 catch。</p>
<p>如果没有使用 catch 方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。</p>
<p>catch 方法返回的还是一个 Promise 对象，因此还可以接着调用 then 方法。</p>
<p>如果没有报错，则会跳过 catch 方法，继续执行后面的 then 方法（如果后面还有 then 方法的话）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getFileByPath(<span class="string">'/user/admin/desktop/file/1.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// 文件1的内容</span></span><br><span class="line">    <span class="comment">// 此处22.txt 不存在</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'/user/admin/desktop/file/22.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// 文件2的内容</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'/user/admin/desktop/file/3.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// 文件3的内容</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<p>上面的代码因为并没有读取到文件 22.txt 所以直接跳过下面的 then ，直接调用 catch 方法所以最终的结果是输出了文件 1 的内容和 catch 中的错误信息</p>
<h2 id="使用-es7-的-async-和-await"><a href="#使用-es7-的-async-和-await" class="headerlink" title="使用 es7 的 async 和 await"></a>使用 es7 的 async 和 await</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [err, res] = <span class="keyword">await</span> getFileByPath(<span class="string">'/user/admin/desktop/file/22.txt'</span>)</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'出错了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端-点透问题解决方法</title>
    <url>/2018/11/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E7%82%B9%E9%80%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="什么是点透"><a href="#什么是点透" class="headerlink" title="什么是点透"></a>什么是点透</h2><p>当 A/B 两个层上下 z 轴重叠，上层的 A 点击后<strong>消失</strong>或<strong>移开</strong>，并且 B 元素本身有默认 click 事件（如 a 标签）或绑定了 click 事件。在这种情况下，点击 A/B 重叠的部分，就会出现点透的现象。(抄别人的 😂)</p>
<h2 id="点透的原因"><a href="#点透的原因" class="headerlink" title="点透的原因"></a>点透的原因</h2><p>事件的触发顺序为: <code>touchstart =&gt; touchmove =&gt; touchend =&gt; click</code> 亦即 click 的触发是有延迟的，这个时间大概在 300ms 左右。</p>
<p>当手指触摸到屏幕的时候，系统生成两个事件，一个是 touch 一个是 click，touch 先执行，touch 执行完成后，A 从 DOM 树上面消失了，而且由于移动端 click 还有延迟 300ms 左右的关系，当系统要触发 click 的时候，发现在用户点击的位置上面，目前离用户最近的元素是 B，所以就直接把 click 事件作用在 B 元素上面了。</p>
<h2 id="解决点透的方式"><a href="#解决点透的方式" class="headerlink" title="解决点透的方式"></a>解决点透的方式</h2><p><strong>方法一: 使用<code>github</code>上的第三方开源<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">fastclick</a>库解决</strong></p>
<p>引入<code>fastclick.js</code>, 原生 js 直接添加如下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'load'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    FastClick.attach(<span class="built_in">document</span>.body)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>JQuery</code>或<code>Zepto</code> 加上如下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  FastClick.attach(<span class="built_in">document</span>.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当然 require 的话就这样:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FastClick = <span class="built_in">require</span>(<span class="string">'fastclick'</span>)</span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body, options)</span><br></pre></td></tr></table></figure>

<p><strong>方法二: 用 touchend 代替 tap 事件并阻止掉 touchend 的默认行为 preventDefault()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'ele'</span>).on(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">  e.preventDefault()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>方法三: 延迟<code>300ms+</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'ele'</span>).on(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;, <span class="number">340</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注: <code>zepto</code> 的 tap 事件是有点透问题的，但是最新版的 zepto 已经修复了这个问题。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nrm切换npm源</title>
    <url>/2018/11/20/%E4%BD%BF%E7%94%A8nrm%E5%88%87%E6%8D%A2npm%E6%BA%90/</url>
    <content><![CDATA[<p>nrm 是 npm 资源管理器，允许你快速切换 npm 源, npm 默认使用的源在国外,国内访问速度会比较慢,建议使用淘宝镜像.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i nrm -g</span><br></pre></td></tr></table></figure>

<p>使用 yarn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add nrm</span><br></pre></td></tr></table></figure>

<h2 id="nrm-常用命令"><a href="#nrm-常用命令" class="headerlink" title="nrm 常用命令"></a>nrm 常用命令</h2><p>查看可选源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>

<p>切换 npm 源, 以淘宝源为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<p>测试速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm <span class="built_in">test</span> npm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>nrm</tag>
      </tags>
  </entry>
  <entry>
    <title>react 学习笔记</title>
    <url>/2018/11/02/react%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="jsx-中的注释"><a href="#jsx-中的注释" class="headerlink" title="jsx 中的注释"></a>jsx 中的注释</h2><ol>
<li>使用 <code>//</code> 但是注意不要把 <code>{}</code> 中的注释掉</li>
<li>使用 <code>/* */</code></li>
</ol>
<h2 id="jsx-中的注意点"><a href="#jsx-中的注意点" class="headerlink" title="jsx 中的注意点"></a>jsx 中的注意点</h2><ol>
<li>jsx 中元素添加 class 类名，使用 <code>classname</code> 来代替 <code>class</code></li>
<li>使用 <code>htmlFor</code> 代替 label 的 <code>for</code> 属性</li>
<li>使用 jsx 中创建 DOM 元素时候， 所有元素必须有唯一的根标签，和 vue 类似</li>
<li>jsx 语法中标签必须成对出现，单标签必须闭合</li>
</ol>
<h2 id="React-创建组件的两种方式"><a href="#React-创建组件的两种方式" class="headerlink" title="React 创建组件的两种方式"></a>React 创建组件的两种方式</h2><h3 id="构造函数创建组件"><a href="#构造函数创建组件" class="headerlink" title="构造函数创建组件"></a>构造函数创建组件</h3><p>如果要接收外界传递的数据，需要在构造函数的参数列表中使用 <code>props</code> 来接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 名称 第一个字母必须大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 必须返回一个 JSX 虚拟 DOM</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      这是 Hello 组件----&#123;props.name&#125;---&#123;props.age&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function World(props) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      这是 Hello 组件----&#123;props.name&#125;---&#123;props.age&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  name: <span class="string">'大黄'</span>,</span><br><span class="line">  age: <span class="string">'12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Hello name=&#123;dog.name&#125; age=&#123;dog.age&#125; /&gt;</span><br><span class="line">    &lt;World &#123;...dog&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.querySelector('#app')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-class-创建组件"><a href="#使用-class-创建组件" class="headerlink" title="使用 class 创建组件"></a>使用 class 创建组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">World</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        这是 World 组件 &#123;<span class="keyword">this</span>.props.name&#125;-----&#123;<span class="keyword">this</span>.props.age&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意： 无论是 class 创建组件还是 function 创建组件，他们的 props 都是只读的</p>
<p><strong>两种创建组件方式的对比</strong></p>
<ol>
<li>使用 class 创建的组件，有自己的私有数据(this.state)和生命周期函数，使用 function 创建的组件则没有</li>
<li>使用 class 创建的组件叫做<strong>有状态组件</strong>，使用 function 创建的组件叫做<strong>无状态组件</strong></li>
<li>有状态组件和无状态组件的区别就是有没有 <code>state</code> 属性和生命周期函数</li>
<li>React 官方说 无状态组件，由于没有 <code>state</code> 和生命周期，所以运行效率会比有状态组件效率稍高</li>
</ol>
<h2 id="React-中使用-css-模块化解决-css-样式表作用域冲突问题"><a href="#React-中使用-css-模块化解决-css-样式表作用域冲突问题" class="headerlink" title="React 中使用 css 模块化解决 css 样式表作用域冲突问题"></a>React 中使用 css 模块化解决 css 样式表作用域冲突问题</h2><p>webpack.config.js 中在 css loader 中配置固定参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// css-loader 加固定的参数，为普通的css样式表启用模块化</span></span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader?modules'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>引入 css 样式表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用样式表</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'@/css/cmtlist.css'</span></span><br><span class="line"><span class="built_in">console</span>.log(styles)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">CmtItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.item&#125;&gt;</span><br><span class="line">      &lt;h4 className=&#123;styles.user&#125;&gt;评论人：&#123;props.user&#125;&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p className=&#123;styles.content&#125;&gt;评论内容：&#123;props.content&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>localIdentName</code> 自定义类名生成规则</p>
<p><strong>参数:</strong></p>
<ul>
<li>[path] 类名带样式表相对于项目根目录所在路径</li>
<li>[name] 类名带样式表文件名称</li>
<li>[local] 类名带样式表中定义类名的名称</li>
<li>[hash:length] 32 位的 hash 值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    <span class="comment">// css-loader 加固定的参数，为普通的css样式表启用模块化</span></span><br><span class="line">    use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader?modules&amp;localIdentName=[path][name]-[local]-[hash:5]'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ol>
<li>样式表中被 <code>:local()</code> 包裹起来的类名会被模块化，默认。 被 <code>:global()</code> 包裹起来的类名不会被模块化，全局生效</li>
<li>css 模块化只对 class 选择器和 id 选择器生效，对标签选择器无效</li>
</ol>
<h2 id="React-中事件的绑定"><a href="#React-中事件的绑定" class="headerlink" title="React 中事件的绑定"></a>React 中事件的绑定</h2><p>React 中绑定事件名称都是由 React 提供的，是将原生的名称变成驼峰命名，如果：<code>onclick =&gt; onClick</code></p>
<p>事件绑定的格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onClick=&#123; <span class="function"><span class="keyword">function</span> &#125;</span></span><br></pre></td></tr></table></figure>

<p>如果需要给调用的函数传递参数可以这样写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onClick=&#123; () =&gt; &#123; <span class="function"><span class="keyword">function</span> &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>例:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        BindEvent compenent</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> () =&gt;</span> &#123; this.show('hello') &#125; &#125; &gt;button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show (str = <span class="string">''</span>) &#123;</span><br><span class="line">    alert(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改-state-中的属性"><a href="#修改-state-中的属性" class="headerlink" title="修改 state 中的属性"></a>修改 state 中的属性</h2><p>使用 setState 修改 state 中的属性，不推荐直接使用 <code>this.state.msg</code> 修改</p>
<p>用法和微信小程序中的 <code>setData</code> 一样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  msg: <span class="string">'hello world'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>setState 方法的执行是异步的，获取最新的 state 的值，需要在回调函数中获取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">  &#123;</span><br><span class="line">    msg: <span class="string">'hello world'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.msg)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="使用-ref-获取-DOM-元素的引用"><a href="#使用-ref-获取-DOM-元素的引用" class="headerlink" title="使用 ref 获取 DOM 元素的引用"></a>使用 <code>ref</code> 获取 DOM 元素的引用</h2><p>在 vue 中，vue 为页面上的元素提供了 ref 属性，获取元素的引用，可以使用 <code>this.$refs.引用名称</code></p>
<p>在 React 中，也提供了 ref 属性，获取元素引用的方式为 <code>this.refs.引用名称</code></p>
<h2 id="实现文本框类似-vue-的双向数据绑定"><a href="#实现文本框类似-vue-的双向数据绑定" class="headerlink" title="实现文本框类似 vue 的双向数据绑定"></a>实现文本框类似 vue 的双向数据绑定</h2><p>vue 中使用 <code>v-model</code> 可以实现双向数据绑定</p>
<p>在 React 中默认是单向数据流, 也就是只能把 state 上的数据绑定到页面中，无法将页面中数据的变化自动同步到 state 中</p>
<p>如果需要监听页面中数据，需要我们手动获取页面数据的变化，调用相应的方法，使用 <code>this.setState({})</code> 同步到 state</p>
<p>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;input style=&#123; &#123;width: '500px'&#125; &#125; type="input" ref="myInput" value=&#123; this.state.msg &#125; onChange=&#123; (e) =&gt; this.change(e)  &#125;/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">change(e) &#123;</span></span><br><span class="line"><span class="xml">    console.log(e.target.value)</span></span><br><span class="line"><span class="xml">    this.setState(&#123;</span></span><br><span class="line"><span class="xml">        msg: this.refs.myInput.value</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="React-中组件的生命周期"><a href="#React-中组件的生命周期" class="headerlink" title="React 中组件的生命周期"></a>React 中组件的生命周期</h2><h3 id="组件创建阶段"><a href="#组件创建阶段" class="headerlink" title="组件创建阶段"></a>组件创建阶段</h3><p>   特点: 只执行一次</p>
<ul>
<li><p>compenentWillMount</p>
<p>相当于 vue 中的 created。 组件中的 props 和 state 数据，都已经可以访问了，组件上的自定义实例方法也可以正常访问。如果 发起 ajax 请求，可以在此方法中完成</p>
</li>
<li><p>reader</p>
<p>虚拟 DOM 正在被创建，rander 执行完毕后，虚拟 DOM 被创建到内存中</p>
</li>
<li><p>componentDidMount</p>
<p>相当于 vue 中的 mounted ，此时可以访问页面中的 dom 元素</p>
</li>
</ul>
<h3 id="组件运行阶段"><a href="#组件运行阶段" class="headerlink" title="组件运行阶段"></a>组件运行阶段</h3><p>   特点：按需根据 props 属性或 state 状态的改变，有选择性的执行 0 次或多次</p>
<ul>
<li><p>shouldComponentUpdate</p>
<p>此方法中要求必须返回 boolean 类型的值。<br> 不能使用 <code>this.state.</code> 获取最新的值，方法中由两个形参 <code>shouldComponentUpdate(nextProps, nextState)</code> 最新的数据，我们需要从形参中获取。<br> 执行此方法的时候，数据已经是最新的了，但是页面还没有重新加载，页面中的数据还是旧的。</p>
</li>
<li><p>componentWillUpdate</p>
<p>组件将要更新，页面还没有被更新</p>
</li>
<li><p>componentWillReceiveProps</p>
<p>props 属性改变，会触发这个方法</p>
</li>
<li><p>render</p>
</li>
<li><p>componentDidUpdate</p>
<p>所有数据都是最新的，页面数据也是最新的</p>
</li>
</ul>
<h3 id="组件销毁阶段"><a href="#组件销毁阶段" class="headerlink" title="组件销毁阶段"></a>组件销毁阶段</h3><p>   特点：只执行一次</p>
<ul>
<li>componentWillUnmount</li>
</ul>
<p><img alt data-src="/images/post/20190512120119.png"></p>
<h2 id="使用-prop-types-对-props-的类型进行校验"><a href="#使用-prop-types-对-props-的类型进行校验" class="headerlink" title="使用 prop-types 对 props 的类型进行校验"></a>使用 prop-types 对 props 的类型进行校验</h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add prop-types</span><br></pre></td></tr></table></figure>

<p>在需要校验的组件中使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Types <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中定义静态属性，propTypes 是固定写法,.isRequired 必须传值的意思</span></span><br><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    initCount: Types.number.isRequired <span class="comment">//相当于java中的泛型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-defaultProps-为-props-设置默认值"><a href="#使用-defaultProps-为-props-设置默认值" class="headerlink" title="使用 defaultProps 为 props 设置默认值"></a>使用 defaultProps 为 props 设置默认值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    initCount: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-中使用路由"><a href="#React-中使用路由" class="headerlink" title="React 中使用路由"></a>React 中使用路由</h2><ol>
<li>后端路由：URL 地址到后端处理函数之间的对应关系</li>
<li>前端路由：hash 地址到组件之间的对应关系 监听 <code>window.onhashchange</code> 事件，并拿到最新的 hash 值，然后对应展示不同的组件即可</li>
</ol>
<p>安装 <code>react-router-dom</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure>

<p>创建 <code>App.jsx</code> 根组件，导入路由所需要的组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashRouter 表示路由的包裹容器，在一个项目中，只需要使用一次</span></span><br><span class="line"><span class="comment">// Route  是路由的规则，同时也是路由的容器</span></span><br><span class="line"><span class="comment">// Link  是路由的链接</span></span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br></pre></td></tr></table></figure>

<p>在 <code>App.jsx</code> 中使用路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/components/Home'</span></span><br><span class="line"><span class="keyword">import</span> Movie <span class="keyword">from</span> <span class="string">'@/components/Movie'</span></span><br><span class="line"><span class="keyword">import</span> Music <span class="keyword">from</span> <span class="string">'@/components/Music'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'@/components/About'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;HashRouter&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;root&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Link to="/</span>home<span class="string">"&gt;首页&lt;/Link&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/movie<span class="string">"&gt;电影&lt;/Link&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/music<span class="string">"&gt;音乐&lt;/Link&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/about<span class="string">"&gt;关于&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/home<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;hr /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/movie<span class="string">" component=&#123;Movie&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;hr /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/music<span class="string">" component=&#123;Music&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;hr /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/HashRouter&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>使用 <code>exact</code> 完全匹配路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有完全匹配才能/music 才能显示组件</span></span><br><span class="line">&lt;Route path=<span class="string">"/music"</span> component=&#123;Music&#125; exact /&gt;</span><br></pre></td></tr></table></figure>

<p>获取路由规则中的参数</p>
<p>设置参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/music/:id"</span> component=&#123;Music&#125; exact /&gt;</span><br></pre></td></tr></table></figure>

<p>取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="keyword">this</span>.props.match.params.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编程式导航-API"><a href="#编程式导航-API" class="headerlink" title="编程式导航 API"></a>编程式导航 API</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跳转到指定的url地址</span></span><br><span class="line"><span class="keyword">this</span>.props.history.push(<span class="string">'url'</span>)</span><br><span class="line"><span class="comment">// 前进或后退 n 个历史记录</span></span><br><span class="line"><span class="keyword">this</span>.props.history.go(n)</span><br><span class="line"><span class="comment">// 后退一个历史记录</span></span><br><span class="line"><span class="keyword">this</span>.props.history.goBack()</span><br><span class="line"><span class="comment">// 前进一个历史记录</span></span><br><span class="line"><span class="keyword">this</span>.props.history.goForward()</span><br></pre></td></tr></table></figure>

<h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>导入 <code>Redirect</code> 组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HashRouter, Route, Link, Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br></pre></td></tr></table></figure>

<p>新建路由规则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由重定向， exact 属性是必须的</span></span><br><span class="line">&lt;Route exact path=<span class="string">"/"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">"/home"</span> /&gt;</span>&#125; /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 配置</title>
    <url>/2018/10/31/Mac%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Mac-终端自动补全忽略大小写"><a href="#Mac-终端自动补全忽略大小写" class="headerlink" title="Mac 终端自动补全忽略大小写"></a>Mac 终端自动补全忽略大小写</h2><p>打开终端,输入如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.inputrc</span><br></pre></td></tr></table></figure>

<p>填入如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> completion-ignore-case on</span><br><span class="line"><span class="built_in">set</span> show-all-if-ambiguous on</span><br><span class="line">TAB: menu-complete</span><br></pre></td></tr></table></figure>

<p>按下<code>ESC</code>输入<code>:wq</code>保存退出，重启终端即可 </p>
<br>

<h2 id="vim-显示颜色和版本号"><a href="#vim-显示颜色和版本号" class="headerlink" title="vim 显示颜色和版本号"></a>vim 显示颜色和版本号</h2><p>复制一份 <code>/usr/share/vim/.vimrc</code> 到用户目录中，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /usr/share/vim/vimrc ~/.vimrc</span><br></pre></td></tr></table></figure>

<p>编辑用户目录下的 <code>.vimrc</code> 文件，追加如下内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">syntax on</span><br><span class="line"><span class="built_in">set</span> nu!</span><br><span class="line"><span class="built_in">set</span> ai!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 下 mongodb 的安装</title>
    <url>/2018/10/31/Mac%20%E4%B8%8B%20mongodb%20%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Mac-下安装-MongoDB"><a href="#Mac-下安装-MongoDB" class="headerlink" title="Mac 下安装 MongoDB"></a>Mac 下安装 MongoDB</h1><p>使用 macOS 下的包管理器 brew 来安装 MongoDB 将会比较省事，还可以在后台运行</p>
<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><strong>方式一</strong></p>
<p>在用户目录下创建 data/db 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/data/db</span><br></pre></td></tr></table></figure>

<p>启动 MongoDB 数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --path ~/data/db</span><br></pre></td></tr></table></figure>

<p>注意：默认在<code>dbpath</code>在根目录下，需要我们手动创建 <code>sudo mkdir -p /data/db</code></p>
<p><strong>方式二</strong></p>
<p>使用如下命令即可启动 MongoDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services start mongodb</span><br></pre></td></tr></table></figure>

<p>重启 MongoDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services restart mongodb</span><br></pre></td></tr></table></figure>

<p>停止 MongoDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services restart mongodb</span><br></pre></td></tr></table></figure>

<p>根据配置文件/usr/local/etc/mongod.conf 中描述，dbpath 在 <code>/usr/local/var/mongodb</code></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>es6 fetch 的简单使用</title>
    <url>/2018/09/19/es6-fetch/</url>
    <content><![CDATA[<p>XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。</p>
<p>Fetch 的出现就是为了解决 XHR 的问题</p>
<p>fetch 的使用方式非常简单，基本上都是固定的套路。</p>
<p>使用 fetch 发起 get 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">'http://127.0.0.1/get?name=zs&amp;age=23'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// &#123;name: "zs", age: "23"&#125;</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>使用 fetch 发起 post 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">new</span> URLSearchParams()</span><br><span class="line">    data.append(<span class="string">'name'</span>, <span class="string">'zs'</span>)</span><br><span class="line">    data.append(<span class="string">'age'</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">    fetch(<span class="string">'http://127.0.0.1/post?name=zs&amp;age=23'</span>, &#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        body: data</span><br><span class="line">    &#125;).then (<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then( <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res) <span class="comment">//&#123;name: "zs", age: "23"&#125; )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原生 fetch 不支持发送 jsonp 请求，我们使用第三方包 fetch-jsonp 发送 jsonp 请求</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add fetch-jsonp</span><br></pre></td></tr></table></figure>

<p>使用方式和 fetch 相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fetchJSONP <span class="keyword">from</span> <span class="string">'fetch-jsonp'</span></span><br><span class="line"></span><br><span class="line">fetchJSONP(<span class="string">'http://api.douban.com/v2/movie/in_theaters'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure>

<p>在 React 中使用 fetch-jsonp 发送请求</p>
<p>安装 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add fetch-jsonp</span><br></pre></td></tr></table></figure>

<p>全局使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fetchJSONP <span class="keyword">from</span> <span class="string">'fetch-jsonp'</span></span><br><span class="line">React.Component.prototype.$http = fetchJSONP</span><br></pre></td></tr></table></figure>

<p>在组件中使用请求豆瓣 api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jsonp()&#125;&gt;fetchJSONP<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$http(<span class="string">'http://api.douban.com/v2/movie/in_theaters'</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">        .then (<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 es7 的 async 和 await 改进</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jsonp = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="keyword">this</span>.$http(</span><br><span class="line">    <span class="string">'http://api.douban.com/v2/movie/in_theaters'</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> response.json()</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详细文档请移步<a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS下使用nvm管理nodejs版本</title>
    <url>/2018/09/01/macOS%E4%B8%8B%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86nodejs%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Node Version Manager - Simple bash script to manage multiple active node.js versions</p>
<p>nvm 是一款 node.js 版本管理工具，通过 nvm 我们可以安装多个版本的 node，而且可以自由切换</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开终端，执行一下脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>macOS 默认安装了 curl， 所以我们使用第一种方式</p>
<p>添加环境变量</p>
<p>在这里，我们在用户变量中添加，即 <code>~/.bash_profile</code> ，添加内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$&#123;XDG_CONFIG_HOME/:-$HOME/.&#125;</span>nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>

<h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>在终端中输入<code>nvm --version</code> 出现版本号，表示安装成功</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>安装最新版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install node <span class="comment"># node 是最新版本的别名</span></span><br></pre></td></tr></table></figure>

<p>安装制定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 6.14.4</span><br></pre></td></tr></table></figure>

<p>列出所有可用版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>

<p>切换已经安装版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>删除已安装的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>显示当前使用的 node 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure>

<p>给你不同的 node 版本添加别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>删除已经定义的别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="nvm-N-A-version-“N-A-gt-N-A”-is-not-yet-installed"><a href="#nvm-N-A-version-“N-A-gt-N-A”-is-not-yet-installed" class="headerlink" title="nvm: N/A: version “N/A -&gt; N/A” is not yet installed"></a><code>nvm: N/A: version “N/A -&gt; N/A” is not yet installed</code></h3><p>出现这个问题是我们把默认的 node 删除了， 使用下面的命令重新指定一下默认的 node 版本即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default node <span class="comment"># 将 默认的版本指定最新版的 node</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>js动态计算rem适配移动端</title>
    <url>/2018/07/22/js%E5%8A%A8%E6%80%81%E8%AE%A1%E7%AE%97rem%E9%80%82%E9%85%8D%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="css3-和-js-实现-rem-适配移动端适配"><a href="#css3-和-js-实现-rem-适配移动端适配" class="headerlink" title="css3 和 js 实现 rem 适配移动端适配"></a>css3 和 js 实现 rem 适配移动端适配</h1><p>在<code>head</code>标签中引入下面的 js,后面直接用 rem 作为单位</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">    resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">    recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> clientWidth = docEl.clientWidth</span><br><span class="line">      <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span></span><br><span class="line">      <span class="comment">// 默认设计图为640的情况下1rem=100px；根据自己需求修改</span></span><br><span class="line">      <span class="keyword">if</span> (clientWidth &gt;= <span class="number">640</span>) &#123;</span><br><span class="line">        docEl.style.fontSize = <span class="string">'100px'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        docEl.style.fontSize = <span class="number">100</span> * (clientWidth / <span class="number">640</span>) + <span class="string">'px'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span></span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 中的生命中期</title>
    <url>/2018/04/22/vue%20%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E4%B8%AD%E6%9C%9F/</url>
    <content><![CDATA[<p>vue 实例从创建，到运行，直到销毁，在这个过程中，会发生一系列事件，这些事件就叫做 vue 的生命周期函数或生命周期钩子</p>
<ol>
<li><p>beforeCreate</p>
<p> 在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>
</li>
<li><p>created</p>
<p> 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>
</li>
<li><p>beforeMount</p>
<p> 在挂载开始之前被调用：相关的 render 函数首次被调用。<br> 该钩子在服务器端渲染期间不被调用。以下周期在服务端渲染期间都不被调用。</p>
</li>
<li><p>mounted</p>
<p> el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted。</p>
</li>
<li><p>beforeUpdate</p>
<p> 数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p>
</li>
<li><p>updated</p>
<p> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
</li>
<li><p>activated</p>
<p> keep-alive 组件激活时调用。</p>
</li>
<li><p>deactivated</p>
<p> keep-alive 组件停用时调用。</p>
</li>
<li><p>beforeDestroy</p>
<p> 实例销毁之前调用。在这一步，实例仍然完全可用。</p>
</li>
<li><p>destroyed</p>
<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>
</li>
</ol>
<br>

<p>找了一张图如下所示</p>
<p><img alt data-src="https://pic.kx520.xyz/img/Vuelifecycle.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 编程式路由和取参</title>
    <url>/2018/04/12/dynamic-router/</url>
    <content><![CDATA[<br>

<p>vue 中我们可以使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，除此之外我们还可以借助 router 的实例方法，通过编写代码来实现。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>router.push(location, onComplete?, onAbort?)</p>
<p>注意：在 Vue 实例内部，你可以通过 $router 访问路由实例。因此你可以调用 <code>this.$router.push</code></p>
<p>引用官方文档的话：想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>
<p>当你点击 <code>&lt;router-link&gt;</code> 时，这个方法会在内部调用，所以说，点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/Music'</span>)</span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">'/Music'</span> &#125;)</span><br><span class="line"><span class="comment">// 命名的路由 name 要在路由文件中定义</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>: <span class="string">'music'</span>, <span class="attr">params</span>: &#123; <span class="attr">info</span>: <span class="string">'music'</span> &#125;&#125;)</span><br><span class="line"><span class="comment">// 带查询参数</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">'/Movie'</span>, <span class="attr">query</span>: &#123; <span class="attr">info</span>: <span class="string">'movie'</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="来看一个案例"><a href="#来看一个案例" class="headerlink" title="来看一个案例"></a>来看一个案例</h3><p>定义两个组件 Music 和 Movie, 在 router 中引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/Music'</span>,</span><br><span class="line">      name: <span class="string">'music'</span>,</span><br><span class="line">      component: Music</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/Movie'</span>,</span><br><span class="line">      name: <span class="string">'movie'</span>,</span><br><span class="line">      component: Movie</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 <code>App.vue</code> 中添加两个按钮，绑定两个方法，使用编程式路由进行页面跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"goMusic"</span>&gt;&#123;&#123; music &#125;&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="goMovie"&gt;&#123;&#123; movie &#125;&#125;&lt;/</span>button&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      music: <span class="string">'显示Music'</span>,</span><br><span class="line">      movie: <span class="string">'显示Movie'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    goMusic () &#123;</span><br><span class="line">      <span class="comment">// 编程式路由</span></span><br><span class="line">      <span class="comment">// 字符串</span></span><br><span class="line">      <span class="comment">// this.$router.push('/Music')</span></span><br><span class="line">      <span class="comment">// 对象</span></span><br><span class="line">      <span class="comment">// this.$router.push(&#123; path: '/Music' &#125;)</span></span><br><span class="line">      <span class="comment">// 命名的路由</span></span><br><span class="line">      <span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>: <span class="string">'music'</span>, <span class="attr">params</span>: &#123; <span class="attr">info</span>: <span class="string">'music'</span> &#125;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    goMovie () &#123;</span><br><span class="line">      <span class="comment">// this.$router.push('/Movie')</span></span><br><span class="line">      <span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">      <span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">'/Movie'</span>, <span class="attr">query</span>: &#123; <span class="attr">info</span>: <span class="string">'movie'</span> &#125; &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>Music.vue</code> 和 <code>Movie.vue</code> 中获取参数值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Music.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;<span class="keyword">this</span> is music component&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;hr&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;获取编程式路由传递过来的值是 &#123;&#123; msg &#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    getParams() &#123;</span><br><span class="line">      <span class="comment">// console.log(this.$route.params)</span></span><br><span class="line">      <span class="keyword">this</span>.msg = <span class="keyword">this</span>.$route.params.info</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.getParams()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Movie.vue</code> 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;<span class="keyword">this</span> is movie component&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;hr&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;获取编程式路由传递过来的值是 &#123;&#123; msg &#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    getQuery () &#123;</span><br><span class="line">      <span class="keyword">this</span>.msg = <span class="keyword">this</span>.$route.query.info</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.getQuery()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>query 是path引入, params 是name引入,两者不能混淆使用, 否则没效果 </li>
<li>query 相当于 get 请求，页面跳转的时候，可以在地址栏看到请求参数</li>
<li>params 相当于 post 请求，参数不会在地址栏中显示</li>
</ol>
<br>

<p>完整 demo 点击<a href="https://github.com/love201314/dynamic-router-demo/archive/master.zip" target="_blank" rel="noopener">这里</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>html5和css3 语法基础</title>
    <url>/2018/02/22/html5%E5%92%8Ccss3%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h2><p>新增语义化标签</p>
<ul>
<li><code>nav</code> 表示导航</li>
<li><code>header</code> 表示页眉</li>
<li><code>footer</code> 表示页脚</li>
<li><code>main</code> 表示主题内容</li>
<li><code>artilce</code> 表示文章</li>
<li><code>aside</code> 表示侧边栏</li>
</ul>
<p>新增表单<code>input</code>的<code>type</code>属性</p>
<ul>
<li><code>color</code> 拾色器</li>
<li><code>email</code> 邮箱，提供验证要求输入必须带<code>@</code></li>
<li><code>tel</code> 手机号，不提供验证，移动端会自动打开数字键盘</li>
<li><code>url</code> 网址，提供验证</li>
<li><code>number</code> 数字， 只能输入数字</li>
<li><code>search</code> 搜索，输入框右边会有一个删除按钮</li>
<li><code>range</code> 可拖动的范围控件</li>
<li><code>time</code> 时分秒</li>
<li><code>date</code> 年月日</li>
<li><code>datetime</code> 大多数浏览器不支持此属性</li>
<li><code>month</code> 年月</li>
<li><code>week</code> 年周</li>
</ul>
<p>新增表单属性</p>
<ul>
<li><code>placeholder</code> 提示文本</li>
<li><code>autofocus</code> 自动获取焦点</li>
<li><code>autocomplete</code> 自动完成，<code>on</code>打开，<code>off</code> 关闭，要显示效果，表单成功提交，添加该属性的元素必须有<code>name</code>属性</li>
<li><code>require</code> 此属性，表示该表单项为必填项</li>
<li><code>pattern</code> 正则表达式验证</li>
<li><code>multiple</code> 用在文件上传或者 email 中，表示多个</li>
</ul>
<p>新增表单事件</p>
<ul>
<li><code>oninput</code> 监听当前元素内容的改变</li>
<li><code>oninvalid</code> 当验证不通过是触发，<code>setCustomValidity()</code>可以自定义验证提示信息</li>
</ul>
<p>新增多媒体标签</p>
<ul>
<li><p><strong>audio</strong><br>属性 - <code>src</code> 源文件路径 - <code>controls</code> 显示音频播放器的控制面板 - <code>autoplay</code> 自动播放，新版 chrome 已经禁用该属性，无法自动播放 - <code>loop</code> 循环播放</p>
</li>
<li><p><strong>video</strong><br>属性 - <code>src</code> 源文件路径 - <code>controls</code> 显示视频播放器的控制面板 - <code>autoplay</code> 自动播放，新版 chrome 已经禁用该属性，无法自动播放 - <code>loop</code> 循环播放 - <code>poster</code> 视频播放前显示的默认画面，默认是视频的第一帧，可以设置为图片 - <code>muted</code> 静音 - <code>width</code>, <code>height</code> 宽高，视频会保持原始的宽高比，所以一般宽高只设置一个即可 - <code>source</code> 解决兼容性问题， 设置不同的视频源<br><code>javascript &lt;video autoplay controls&gt; &lt;source src=&quot;&quot; type=&quot;&quot;&gt; &lt;source src=&quot;&quot; type=&quot;&quot;&gt; &lt;/video&gt;</code></p>
</li>
</ul>
<h3 id="语义化标签的兼容性处理"><a href="#语义化标签的兼容性处理" class="headerlink" title="语义化标签的兼容性处理"></a>语义化标签的兼容性处理</h3><ul>
<li><p><code>IE9</code> 默认吧<code>main</code>标签设置为行内元素，我们需要设置<code>main</code>的<code>display</code>为<code>block</code></p>
</li>
<li><p><code>IE8</code> 需要引入第三方的<code>html5shiv.min.js</code>以支持 html5 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">--</span> 条件注释 <span class="attr">ie</span>版本小于<span class="attr">9</span> 才引入<span class="attr">js</span>文件 <span class="attr">--</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="/js/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="新增dom元素获取方式"><a href="#新增dom元素获取方式" class="headerlink" title="新增dom元素获取方式"></a>新增<code>dom</code>元素获取方式</h3><ol>
<li><code>document.querySelector()</code> 获取单个值</li>
<li><code>document.querySelectorAll()</code> 获取多个值</li>
</ol>
<h3 id="新增操作元素类样式的方法"><a href="#新增操作元素类样式的方法" class="headerlink" title="新增操作元素类样式的方法"></a>新增操作元素类样式的方法</h3><p>使用<code>classList</code>获取类列表，其方法如下:</p>
<ul>
<li><code>add</code> 添加</li>
<li><code>remove</code> 移除</li>
<li><code>toggle</code> 切换</li>
<li><code>contains</code> 包含</li>
</ul>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p><strong>规范:</strong></p>
<ol>
<li>以<code>data-</code>开头</li>
<li><code>data-</code> 后必须有一个字符， 如<code>data-school-name</code></li>
</ol>
<p><strong>取值方式（2 种）:</strong></p>
<ol>
<li><code>element.dataset[&#39;schoolName&#39;]</code></li>
<li><code>element.dataset.schoolName</code></li>
</ol>
<p><strong>修改方式:</strong><br><code>element.dataset.schoolName = &#39;index&#39;</code></p>
<h3 id="监听网络状态改变的事件"><a href="#监听网络状态改变的事件" class="headerlink" title="监听网络状态改变的事件"></a>监听网络状态改变的事件</h3><ol>
<li><code>ononline</code> 网络连接时后触发该事件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'online'</span>, () =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>onoffline</code> 网络断开连接时候触发</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'offline'</span>, () =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="文件读取-FileReader"><a href="#文件读取-FileReader" class="headerlink" title="文件读取 FileReader"></a>文件读取 <code>FileReader</code></h3><p><strong>方法:</strong></p>
<ol>
<li><code>readAsText</code> 读取文本文件，返回文本内容字符串，默认编码<code>utf-8</code></li>
<li><code>readAsBinaryString</code> 读取任意文本类型，返回二进制字符串</li>
<li><code>readAsDataURL</code> 读取文件，获取一段以<code>data</code>开头的字符串(常用于读取图片，将返回的该字符串设置给<code>img</code>的 src 属性)，此方法没有返回值，它会将读取的结果封装到对象的<code>result</code> 属性中</li>
<li><code>abort</code> 中断读取</li>
</ol>
<p><strong>事件:</strong></p>
<ol>
<li><code>onabort</code>: 读取文件中断时触发</li>
<li><code>onerror</code>: 读取文件错误时触发</li>
<li><code>onload</code>: 文件读取成功时触发</li>
<li><code>onloadend</code>: 文件读取完成时触发, 不论是否成功</li>
<li><code>onloadstart</code>: 开始读取文件时触发</li>
<li><code>onprogress</code>: 读取文件过程中持续触发</li>
</ol>
<p><strong>示例:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myFile"</span> <span class="attr">id</span>=<span class="string">"myFile"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#myFile'</span>).addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 创建文件读取的对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader()</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取file表单中的文件, 是一个数组</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> file = <span class="keyword">this</span>.files</span></span><br><span class="line">      reader.readAsDataURL(file[0])</span><br><span class="line"><span class="actionscript">      <span class="comment">// 文件读取完成, 显示图片</span></span></span><br><span class="line"><span class="actionscript">      reader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>).src = reader.result</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="web-存储"><a href="#web-存储" class="headerlink" title="web 存储"></a>web 存储</h3><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a><strong>sessionStorage</strong></h4><blockquote>
<p>存储容量为 5MB 左右，数据存储在当前页面的内存中，关闭当前页面，数据会被清楚</p>
</blockquote>
<p><strong>方法:</strong></p>
<ul>
<li>setItem(key, value) 键值对的方式存储数据</li>
<li>getItem(key) 根据 key 获取 value, key 不存在,返回 null</li>
<li>removeItem(key) 根据 key 删除 value</li>
<li>clear() 清空所有存储的内容</li>
</ul>
<p><strong>使用方式:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.sessionStorage.setItem(key, value)</span><br><span class="line"><span class="built_in">window</span>.sessionStorage.getItem(key)</span><br><span class="line"><span class="built_in">window</span>.sessionStorage.removeItem(key)</span><br><span class="line"><span class="comment">// window可省略</span></span><br></pre></td></tr></table></figure>

<h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a><strong>localStorage</strong></h4><blockquote>
<p>存储数据到本地硬盘,数据永久有效, 存储内容为 20MB 左右,</p>
</blockquote>
<p><strong>方法:</strong></p>
<ul>
<li>setItem(key, value) 键值对的方式存储数据</li>
<li>getItem(key) 根据 key 获取 value, key 不存在,返回 null</li>
<li>removeItem(key) 根据 key 删除 value</li>
<li>clear() 清空所有存储的内容</li>
</ul>
<p><strong>案例:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>设置值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>获取值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>移除值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>)[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> value = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>).value</span></span><br><span class="line"><span class="actionscript">      localStorage.setItem(<span class="string">'info'</span>, value)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>)[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> res = localStorage.getItem(<span class="string">'info'</span>)</span></span><br><span class="line">      alert(res)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>)[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      localStorage.removeItem(<span class="string">'info'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><p><strong>方法：</strong></p>
<ol>
<li><code>history.back()</code> 去上一条历史</li>
<li><code>history.forward()</code> 去上一条历史</li>
<li><code>history.go()</code> 相对于当前, 跳转多少条记录, 前进正值, 后退 负值</li>
<li><code>history.pushState()</code> 追加历史记录并在当前页面显示,此方法三个参数<ul>
<li>第一个参数: 存储的数据</li>
<li>第二个参数: 标题</li>
<li>第三个参数: 要追加历史记录的地址</li>
</ul>
</li>
<li><code>history.replaceState()</code> 替换历史记录，此方法接收三个参数<ul>
<li>第一个参数: 存储的数据</li>
<li>第二个参数: 标题</li>
<li>第三个参数: 要替换历史记录的地址</li>
</ul>
</li>
</ol>
<p><strong>事件:</strong><br><code>window.onpopstate = function() {}</code> 监听历史切换页面，点击浏览器前进后退按钮是触发</p>
<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ol>
<li><strong>e[attr]</strong> 查找拥有 attr 属性的 e 元素</li>
<li><strong>e[attr=value]</strong> 查找拥有 attr 属性并且属性值等于 value 的 e 元素</li>
<li><strong>e[attr*=value]</strong> 查找拥有 attr 属性并且属性值包含 value 的 e 元素</li>
<li><strong>e[attr^=value]</strong> 查找拥有 attr 属性并且属性值以 value 开头的 e 元素</li>
<li><strong>e[attr$=value]</strong> 查找拥有 attr 属性并且属性值以 value 结束的 e 元素</li>
</ol>
<h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><ol>
<li><code>~</code> 满足条件的<strong>相邻</strong>后面的兄弟元素</li>
<li><code>+</code>满足条件的后面的兄弟元素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.first</span> + <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.first</span> ~ <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">      background: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 白色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>e:first-child:</strong> 查找 e 元素的父元素中第一个元素</li>
<li><strong>e:last-child:</strong> 查找 e 元素的父元素中最后一个元素</li>
<li><strong>e:first-of-type:</strong> 查找 e 元素的父元素中第一个 e 元素</li>
<li><strong>e:last-of-type:</strong> 查找 e 元素的父元素中最后一个 e 元素</li>
<li><strong>e:nth-child():</strong> 根据索引或表达式或关键字选择 e 元素</li>
<li><strong>e:nth-last-child():</strong> 从后往前开始</li>
<li><strong>e:nth-of-type():</strong> 根据索引或表达式或关键字选择 e 元素(指定类型)</li>
<li><strong>e:empty</strong> 无任何内容(包括空格)的 e 元素, 不常用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择第三个li元素 索引从1开始*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">      background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*选择索引为偶数的li元素*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*或者li:nth-child(2n)*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(even)</span> &#123;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*选择索引为奇数的li元素*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*或者li:nth-child(2n-1)*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(odd)</span> &#123;</span></span><br><span class="line">      background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*给前面两个li添加样式*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*n默认取值范围为0~子元素长度, 当n&lt;=0时, 选取无效*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(-n</span> + 2) &#123;</span></span><br><span class="line">      font-size: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/*从第二个li元素开始,给li设置背景色*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(n</span> + 2) &#123;</span></span><br><span class="line">      background: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ol>
<li><p><code>e::before</code>, <code>e::after</code></p>
<ul>
<li>是行内元素, 设置宽高转换成块级元素,</li>
<li>必须设置 content=’’, 否则后期在页面中不可见</li>
<li>不会在 dom 树中生成, 无法用 js 操作伪元素</li>
<li>兼容 IE8, 可以写成单冒号</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 80px;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 80px;</span><br><span class="line">        background-color: blueviolet;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">        content: '';</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        width: 20px;</span><br><span class="line">        height: 20px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        content: '';</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        width: 20px;</span><br><span class="line">        height: 20px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        transform: translate(-50%, 50%);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>::first-letter</code> 第一个字符,英文第一个字符, 中文第一个汉字</li>
<li><code>::first-line</code> 第一行</li>
<li><code>::selection</code> 选中的内容</li>
</ol>
<h3 id="其他新增-css-属性"><a href="#其他新增-css-属性" class="headerlink" title="其他新增 css 属性"></a>其他新增 css 属性</h3><h4 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h4><p><strong>语法:</strong><br><code>text-shadow: offsetX offsetY blur color</code></p>
<ul>
<li>offsetX: x 轴偏移值</li>
<li>offsetY: y 轴偏移值</li>
<li>blur: 模糊度 — 可选</li>
<li>color: 阴影颜色 — 可选</li>
<li>可以通过逗号分隔, 设置多重阴影</li>
</ul>
<h4 id="改变盒模型"><a href="#改变盒模型" class="headerlink" title="改变盒模型"></a>改变盒模型</h4><blockquote>
<p>box-sizing: border-box</p>
</blockquote>
<p>设置的宽高就是最终盒子的宽高, 不会被 border, padding, margin 影响, 是改变内容的宽高</p>
<h4 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h4><blockquote>
<p>border-radius: 50%</p>
</blockquote>
<ul>
<li>设置一个值：四个角的圆角值都一样</li>
<li>设置两个值:第一个值控制左上/右下，第二个值控制右上/左下</li>
<li>设置三个值：第一个值控制左上，第二值控制右上/左下，第三个值控制右下</li>
<li>设置四个值：左上 右上 右下 左下</li>
<li>显示圆, 设置值为 50%或宽高(宽高相等)的一半</li>
</ul>
<h4 id="边框阴影"><a href="#边框阴影" class="headerlink" title="边框阴影"></a>边框阴影</h4><blockquote>
<p>box-shadow:h v blur spread color inset</p>
</blockquote>
<ul>
<li>h: 水平方向的偏移值</li>
<li>v: 垂直方向的偏移值</li>
<li>blur: 模糊度—可选, 默认为 0</li>
<li>spread: 阴影的尺寸，扩展和收缩阴影的大小–可选 默认 0</li>
<li>color: 颜色–可选，默认黑色</li>
<li>inset: 内阴影–可选,默认是外阴影</li>
<li>通过逗号分隔, 设置多个阴影</li>
</ul>
<h4 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h4><blockquote>
<p>线性渐变指沿着某条直线朝一个方向产生渐变效果</p>
</blockquote>
<p><strong>语法:</strong><br><code>linear-gradient( [&lt;point&gt; || &lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt; [, &lt;stop&gt;]* )</code></p>
<p><strong>参数说明:</strong></p>
<ul>
<li>第一个参数表示线性渐变的方向<ol>
<li>to left：设置渐变为从右到左。相当于: 270deg;</li>
<li>to right：设置渐变从左到右。相当于: 90deg</li>
<li>to top：设置渐变从下到上。相当于: 0deg;</li>
<li>to bottom：设置渐变从上到下。相当于: 180deg。这是默认值，等同于留空不写。也可以直接指定度数，如 45deg</li>
</ol>
</li>
<li>第二个参数是起点颜色,可以指定颜色的位置</li>
<li>第三个参数是终点颜色，你还可以在后面添加更多的参数，表示多种颜色的渐变</li>
<li>示例</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red 0%, red 30%, blue 50%, blue 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h4><blockquote>
<p>径向渐变指从一个中心点开始沿着四周产生渐变效果</p>
</blockquote>
<p><strong>语法:</strong></p>
<ul>
<li><code>radial-gradient([ [ &lt;shape&gt; || &lt;size&gt; ][ at ]? , | at &lt;position&gt;, ]?&lt;color-stop&gt;[ , &lt;color-stop&gt; ]+)</code></li>
<li><code>radial-gradient(形状 大小 坐标,颜色1，颜色2...)</code></li>
</ul>
<p><strong>参数说明:</strong></p>
<ul>
<li>shape：渐变的形状，ellipse 表示椭圆形，circle 表示圆形。默认为 ellipse，如果元素形状为正方形的元素，则 ellipse 和 circle 显示一样</li>
<li>size：渐变的大小，即渐变到哪里停止，它有四个值。 closest-side：最近边； farthest-side：最远边； closest-corner：最近角； farthest-corner：最远角。默认是最远的角 farthest-corner</li>
<li>position: 确定圆心的位置。如果提供 2 个参数，第一个表示横坐标，第二个表示纵坐标；如果只提供一个，第二值默认为 50%，即 center.</li>
<li>color-stop：指定颜色。Rgba hsla</li>
<li>示例</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.div1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">        <span class="comment">/*设置径向渐变效果:从中心点开始，从一种颜色到另外一种颜色*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at center, red, blue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.div2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">        <span class="comment">/*设置径向渐变效果:从指定坐开始，从一种颜色到另外一种颜色*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at 50px 50px, #eeffff, #334455);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.div3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">        <span class="comment">/*设置径向渐变效果:从指定坐标开始，从一种颜色到另外一种颜色，同时指定颜色的位置*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at 50px 50px, #eeffff 0%, #666 70%, rgba(33, 33, 33, 0.8) <span class="number">80%</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*指定渐变的形状*/</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.div4</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">        <span class="comment">/*设置径向渐变效果:从中心点开始，从一种颜色到另外一种颜色*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(ellipse at center, red, green, blue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*指定渐变的size*/</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.div5</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">        <span class="comment">/*设置径向渐变效果:从中心点开始，从一种颜色到另外一种颜色,同时指定了大小为渐变到最近的边*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle closest-side at center, red, green, blue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*使用系统提供的位置设置*/</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.div6</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">        <span class="comment">/*设置径向渐变效果:从右上角点开始，从一种颜色到另外一种颜色*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at top right, red, green, blue);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><p><strong>background-repeat</strong></p>
<ul>
<li>round 将背景图片缩放后再平铺</li>
<li>space 背景不会缩放平铺, 只是会在图片之间产生间距</li>
</ul>
<p><strong>background-attachment</strong></p>
<ul>
<li>fixed 背景图片位置固定不变</li>
<li>scroll 背景跟随着容器滚动, 不会跟随着当前容器的内容滚动, 默认</li>
<li>local 背景图片跟随着内容滚动, 不随着容器滚动</li>
<li>如果这个文档发生滚动, local, scroll 会跟随文档滚动</li>
</ul>
<p><strong>background-size</strong></p>
<ul>
<li>auto 默认值, 原始图片大小</li>
<li>length 给宽高值 宽度/高度 宽度/auto(保持比例自动缩放)</li>
<li>percent 给百分比 参照父容器的内容区域的百分比</li>
<li>contain 按比例调整图片大小, 是图片宽高自动适应这个元素的背景区域, 完全显示图片<ul>
<li>图片大于容器 可能会留有空白, 对背景图片进行缩小</li>
<li>图片小于容器 可能会留有空白, 对背景图片进行放大</li>
</ul>
</li>
<li>cover 按比例缩放, 填满整个背景区域, 背景图可能显示不完全<code>常用</code></li>
</ul>
<p><strong>background-origin</strong></p>
<ul>
<li>border-box 背景原点以边框出开始</li>
<li>padding-box 背景原点以 padding 出开始, 默认</li>
<li>content-box 背景原点以内容处开始</li>
</ul>
<p><strong>background-clip</strong></p>
<ul>
<li>border-box 背景被裁剪到边框盒</li>
<li>padding-box 背景被裁剪到内边距框。</li>
<li>content-box 背景被裁剪到内容框。</li>
</ul>
<h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><blockquote>
<p>ransition: property duration timing-function delay;</p>
</blockquote>
<p><strong>参数说明:</strong></p>
<p>​ transition 属性是一个简写属性, 用于设置四个过渡属性 transition-property | transition-duration | transition-timing-function | transition-delay</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>transition-property</td>
<td>规定设置过渡效果的 css 属性的名称</td>
</tr>
<tr>
<td>transition-duration</td>
<td>规定完成过渡效果需要多少秒/毫秒</td>
</tr>
<tr>
<td>transition-timing-function</td>
<td>规定速度效果的速度曲线</td>
</tr>
<tr>
<td>transition-delay</td>
<td>定义过渡效果何时开始, 延迟多少秒开始</td>
</tr>
</tbody></table>
<p><strong>备注</strong></p>
<ul>
<li>添加多个过渡样式, 以逗号分隔</li>
<li>transition-timing-function 补充说明</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>规定以相同的速度开始至结束的过渡效果(等于 cubic-bezier(0, 0, 1, 1))</td>
</tr>
<tr>
<td>ease</td>
<td>规定慢速开始, 然后变快, 然后慢慢结束的过渡效果(cubic-bezier(0.25, 0.1, 0.25, 1))</td>
</tr>
<tr>
<td>ease-in</td>
<td>规定以慢速开始的过渡效果(cubic-bezier(0.42, 0, 1, 1))</td>
</tr>
<tr>
<td>ease-out</td>
<td>规定以慢速结束的过渡效果(cubic-bezier(0, 0, 0.58, 1))</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>规定以慢速开始和结束的过渡效果(cubic-bezier(0.42, 0, 0.58, 1))</td>
</tr>
<tr>
<td>cubic-bezier(n, n, n, n)</td>
<td>在 cubic-bezier 函数中定义自己的值, n 取值在 0-1 之间</td>
</tr>
</tbody></table>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h4><p><strong>常用属性:</strong></p>
<ol>
<li><strong>column-count</strong> 设置列的具体个数</li>
<li><strong>column-width</strong> 设置列的宽度</li>
<li><strong>column-gap</strong> 两列之间的缝隙间隔</li>
<li><strong>column-rule</strong> 规定列之间的宽度、样式和颜色</li>
<li><strong>column-span</strong> 规定元素应横跨多少列(n:指定跨 n 列 all:跨所有列)</li>
</ol>
<p><strong>案例:</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1054px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>, Arial;</span><br><span class="line">        <span class="comment">/*设置以几列的方式显示*/</span></span><br><span class="line">        <span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*指定列宽*/</span></span><br><span class="line">        <span class="attribute">column-width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="comment">/*指定列与列之间的间距*/</span></span><br><span class="line">        <span class="attribute">column-gap</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="comment">/*指定列与列之间间隙的样式*/</span></span><br><span class="line">        <span class="comment">/*column-rule:2px dotted red*/</span></span><br><span class="line">        <span class="comment">/*相对应下面的三个属性*/</span></span><br><span class="line">        <span class="attribute">column-rule-color</span>: red;</span><br><span class="line">        <span class="attribute">column-rule-style</span>: dotted;</span><br><span class="line">        <span class="attribute">column-rule-width</span>: <span class="number">2px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">h4</span> &#123;</span><br><span class="line">        <span class="attribute">column-span</span>: all;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h4><blockquote>
<p>Flex 是 Flexible Box 的缩写,意为”弹性布局”,用来为盒状模型提供最大的灵活性,任何一个容器都可以指定为 flex 布局</p>
</blockquote>
<p><strong>注意:</strong> 设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</p>
<hr>
<p><strong>基本概念</strong></p>
<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>
<hr>
<p><strong>容器属性</strong></p>
<ol>
<li><p><strong>flex-direction 属性</strong></p>
<blockquote>
<p>flex-direction 属性决定主轴的方向（即项目的排列方向)</p>
</blockquote>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>row(默认值)</td>
<td>主轴为水平方向，起点在左端</td>
</tr>
<tr>
<td>row-reverse</td>
<td>主轴为水平方向，起点在右端</td>
</tr>
<tr>
<td>column</td>
<td>主轴为水平方向，起点在右端</td>
</tr>
<tr>
<td>column-reverse</td>
<td>主轴为垂直方向，起点在下沿</td>
</tr>
</tbody></table>
<ol start="2">
<li><strong>flex-wrap 属性</strong></li>
</ol>
<blockquote>
<p>flex-warp 决定 item 的换行方式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数说明:</p>
<ul>
<li><p>nowrap（默认）：不换行。<br><img alt data-src="https://pic.kx520.xyz/img/nowrap.png"></p>
</li>
<li><p>wrap：换行，第一行在上方。<br><img alt data-src="https://pic.kx520.xyz/img/wrap-top.jpg"></p>
</li>
<li><p>wrap-reverse：换行，第一行在下方。<br><img alt data-src="https://pic.kx520.xyz/img/wrap-bottom.jpg"></p>
</li>
</ul>
<ol start="3">
<li><strong>flex-flow 属性</strong></li>
</ol>
<p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap</p>
<ol start="4">
<li><strong>justify-content 属性</strong></li>
</ol>
<blockquote>
<p>justify-content 属性定义了项目在主轴上的对齐方式。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://pic.kx520.xyz/img/justify-content.png"></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start（默认值）</td>
<td>左对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中</td>
</tr>
<tr>
<td>space-between</td>
<td>两端对齐，项目之间的间隔都相等</td>
</tr>
<tr>
<td>space-around</td>
<td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</td>
</tr>
</tbody></table>
<ol start="5">
<li><strong>align-items 属性</strong></li>
</ol>
<blockquote>
<p>align-items 属性定义项目在交叉轴上如何对齐。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://pic.kx520.xyz/img/align-items.png"></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>交叉轴的起点对齐。</td>
</tr>
<tr>
<td>flex-end</td>
<td>交叉轴的终点对齐。</td>
</tr>
<tr>
<td>center</td>
<td>交叉轴的中点对齐。</td>
</tr>
<tr>
<td>baseline</td>
<td>项目的第一行文字的基线对齐。</td>
</tr>
<tr>
<td>stretch（默认值）</td>
<td>如果项目未设置高度或设为 auto，将占满整个容器的高度。</td>
</tr>
</tbody></table>
<hr>
<p><strong>项目(item)属性</strong></p>
<ol>
<li><strong>order 属性</strong></li>
</ol>
<blockquote>
<p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://pic.kx520.xyz/img/order.png"></p>
<ol start="2">
<li><strong>flex-grow 属性</strong></li>
</ol>
<blockquote>
<p>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://pic.kx520.xyz/img/flex-grow.png"></p>
<p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>
<ol start="3">
<li><strong>flex-shrink 属性</strong></li>
</ol>
<blockquote>
<p>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://pic.kx520.xyz/img/flex-shrink.jpg"></p>
<p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>
<ol start="4">
<li><p><strong>flex 属性</strong></p>
<p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
</li>
</ol>
<p>5) <strong>align-self 属性</strong></p>
<blockquote>
<p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img alt data-src="https://pic.kx520.xyz/img/align-self.png"></p>
<p>该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致。</p>
<p><strong>flex 布局参考</strong>: <a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noopener">菜鸟教程</a><br><strong>图片来源</strong>: <a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noopener">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn和npm常用命令对照表</title>
    <url>/2017/10/22/yarn%E5%92%8Cnpm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
    <content><![CDATA[ <center>yarn 和 npm 常用命令对照表<center>

<table>
<thead>
<tr>
<th>npm</th>
<th>yarn</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>npm init (-y)</td>
<td>yarn init (-y)</td>
<td>初始化项目</td>
</tr>
<tr>
<td>npm i package</td>
<td>yarn add package</td>
<td>安某个 u 依赖包</td>
</tr>
<tr>
<td>npm uninstall package</td>
<td>yarn remove package</td>
<td>删除某个依赖包</td>
</tr>
<tr>
<td>npm uninstall package -g</td>
<td>yarn global remove package</td>
<td>删除全局某个依赖包</td>
</tr>
<tr>
<td>npm i -g package</td>
<td>yarn global add package</td>
<td>全局安装某个包</td>
</tr>
<tr>
<td>npm i package -D</td>
<td>yarn add package -D</td>
<td>安装开发模式使用的包</td>
</tr>
<tr>
<td>npm update package</td>
<td>yarn upgrade package</td>
<td>更新包</td>
</tr>
<tr>
<td>npm update package -g</td>
<td>yarn upgrade package</td>
<td>全局更新包</td>
</tr>
<tr>
<td>npm i</td>
<td>yarn</td>
<td>根据 package.json 安装项目全部依赖</td>
</tr>
</tbody></table>
</center></center>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 取消js严格模式</title>
    <url>/2017/08/22/webpack%20%E5%8F%96%E6%B6%88js%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>使用 vue-cli 创建的 vue 项目中引入了 mui，但是在使用过程中出现了如下错误:</p>
<p><img alt data-src="https://pic.kx520.xyz/img/20181107223220.png"></p>
<p>经过查资料发现这是 babel6 默认添加 use strict 引发的问题。</p>
<p><strong>解决方案如下</strong>：</p>
<p>安装 <code>babel-plugin-transform-remove-strict-mode</code></p>
<p>使用 <code>yarn</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add babel-plugin-transform-remove-strict-mode -D</span><br></pre></td></tr></table></figure>

<p>使用 <code>npm</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-transform-remove-strict-mode -D</span><br></pre></td></tr></table></figure>

<p>然后在<code>.babelrc</code>文件中新增配置如下:</p>
<p><img alt data-src="https://pic.kx520.xyz/img/20181107211205.png"></p>
<p>如果<code>.babelrc</code>文件有<code>&quot;modules&quot;: false</code> 一定要去掉</p>
<p><img alt data-src="https://pic.kx520.xyz/img/20181107211253.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper</title>
    <url>/2017/07/22/swiper/</url>
    <content><![CDATA[<h1 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h1><h2 id="解决-swiper4-滑动后不能自动播放的问题"><a href="#解决-swiper4-滑动后不能自动播放的问题" class="headerlink" title="解决 swiper4 滑动后不能自动播放的问题"></a>解决 swiper4 滑动后不能自动播放的问题</h2><p>添加<code>disableOnInteraction: false</code>, 如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">  autoplay: &#123;</span><br><span class="line">    delay: <span class="number">2500</span>,</span><br><span class="line">    disableOnInteraction: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  loop: <span class="literal">true</span>,</span><br><span class="line">  pagination: &#123;</span><br><span class="line">    el: <span class="string">'.swiper-pagination'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp编译Semantic-ui 没有生成css问题</title>
    <url>/2017/05/22/Semantic-ui/</url>
    <content><![CDATA[<p><code>Semantic UI</code>,根据官方的指引进行编译,使用<code>gulp build</code>来编译,最后发现只生成了 semantic.js 和 semantic.min.js ，但没有生成 semantic.css 和 semantic.min.css, <code>gulp build</code> 过程也没有出错. 最后在 GitHub 的官方<a href="https://github.com/Semantic-Org/Semantic-UI/issues/6067" target="_blank" rel="noopener">Issues</a>中找到了解决方法.</p>
<p><strong>解决方法:</strong></p>
<p>在 semantic 文件夹中, 找到 tasks/build/css.js, 注释掉<code>compressedStream = stream.pipe(clone());</code> 即可</p>
<p><img alt="pic" data-src="https://pic.kx520.xyz/img/Snipaste_2018-10-18_00-22-30.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Semantic</tag>
      </tags>
  </entry>
</search>
